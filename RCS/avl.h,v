head	2.10;
access;
symbols;
locks; strict;
comment	@ * @;


2.10
date	2005.06.02.01.06.28;	author rushing;	state Exp;
branches;
next	2.9;

2.9
date	2005.06.02.00.59.03;	author rushing;	state Exp;
branches;
next	2.8;

2.8
date	2005.06.02.00.53.01;	author rushing;	state Exp;
branches;
next	2.7;

2.7
date	2005.06.02.00.20.45;	author rushing;	state Exp;
branches;
next	2.6;

2.6
date	2005.06.01.23.34.55;	author rushing;	state Exp;
branches;
next	2.5;

2.5
date	2005.06.01.22.33.16;	author rushing;	state Exp;
branches;
next	2.4;

2.4
date	2005.06.01.22.30.12;	author rushing;	state Exp;
branches;
next	2.3;

2.3
date	97.02.21.23.27.19;	author rushing;	state Exp;
branches;
next	2.2;

2.2
date	97.02.21.23.23.25;	author rushing;	state Exp;
branches;
next	2.1;

2.1
date	97.02.21.23.09.58;	author rushing;	state Exp;
branches;
next	2.0;

2.0
date	96.02.26.06.18.13;	author rushing;	state Exp;
branches;
next	1.5;

1.5
date	95.11.28.20.33.52;	author rushing;	state Exp;
branches;
next	1.4;

1.4
date	95.11.21.23.46.24;	author rushing;	state Exp;
branches;
next	1.3;

1.3
date	95.11.16.22.46.42;	author rushing;	state Exp;
branches;
next	1.2;

1.2
date	95.11.16.05.53.16;	author rushing;	state Exp;
branches;
next	1.1;

1.1
date	95.11.15.20.39.50;	author rushing;	state Exp;
branches;
next	;


desc
@@


2.10
log
@64-bit platforms: use <int> instead of <long>.
@
text
@/*
 * Copyright (C) 1995 by Sam Rushing <rushing@@nightmare.com>
 * Copyright (C) 2005 by Germanischer Lloyd AG
 * Copyright (C) 2001-2005 by IronPort Systems, Inc.
 */

/* $Id: avl.h,v 2.9 2005/06/02 00:59:03 rushing Exp rushing $ */

#ifdef __cplusplus
extern "C" {
#endif

typedef struct avl_node_tag {
  void *                key;
  struct avl_node_tag * left;
  struct avl_node_tag * right;
  struct avl_node_tag * parent;
  /*
   * The lower 2 bits of <rank_and_balance> specify the balance
   * factor: 00==-1, 01==0, 10==+1.
   * The rest of the bits are used for <rank>
   */
  unsigned int          rank_and_balance;
} avl_node;

#define AVL_GET_BALANCE(n)      ((int)(((n)->rank_and_balance & 3) - 1))

#define AVL_GET_RANK(n) (((n)->rank_and_balance >> 2))

#define AVL_SET_BALANCE(n,b) \
  ((n)->rank_and_balance) = \
    (((n)->rank_and_balance & (~3)) | ((int)((b) + 1)))

#define AVL_SET_RANK(n,r) \
  ((n)->rank_and_balance) = \
    (((n)->rank_and_balance & 3) | ((r) << 2))

struct _avl_tree;

typedef int (*avl_key_compare_fun_type) (void * compare_arg, void * a, void * b);
typedef int (*avl_iter_fun_type)        (void * key, void * iter_arg);
typedef int (*avl_iter_index_fun_type)  (unsigned int index, void * key, void * iter_arg);
typedef int (*avl_free_key_fun_type)    (void * key);
typedef int (*avl_key_printer_fun_type) (char *, void *);

/*
 * <compare_fun> and <compare_arg> let us associate a particular compare
 * function with each tree, separately.
 */

typedef struct _avl_tree {
  avl_node *                    root;
  unsigned int                  length;
  avl_key_compare_fun_type      compare_fun;
  void *                        compare_arg;
} avl_tree;

avl_tree * avl_new_avl_tree (avl_key_compare_fun_type compare_fun, void * compare_arg);
avl_node * avl_new_avl_node (void * key, avl_node * parent);

void avl_free_avl_tree (
  avl_tree *            tree,
  avl_free_key_fun_type free_key_fun
  );

int avl_insert_by_key (
  avl_tree *            ob,
  void *                key,
  unsigned int *        index
  );

int avl_remove_by_key (
  avl_tree *            tree,
  void *                key,
  avl_free_key_fun_type free_key_fun
  );

int avl_get_item_by_index (
  avl_tree *            tree,
  unsigned int          index,
  void **               value_address
  );

int avl_get_item_by_key (
  avl_tree *            tree,
  void *                key,
  void **               value_address
  );

int avl_iterate_inorder (
  avl_tree *            tree,
  avl_iter_fun_type     iter_fun,
  void *                iter_arg
  );

int avl_iterate_index_range (
  avl_tree *            tree,
  avl_iter_index_fun_type iter_fun,
  unsigned int          low,
  unsigned int          high,
  void *                iter_arg
  );

int avl_get_span_by_key (
  avl_tree *            tree,
  void *                key,
  unsigned int *        low,
  unsigned int *        high
  );

int avl_get_span_by_two_keys (
  avl_tree *            tree,
  void *                key_a,
  void *                key_b,
  unsigned int *        low,
  unsigned int *        high
  );

int avl_verify (avl_tree * tree);

void avl_print_tree (
  avl_tree *            tree,
  avl_key_printer_fun_type key_printer
  );

avl_node * avl_get_predecessor (avl_node * node);

avl_node * avl_get_successor (avl_node * node);

/* These two are from David Ascher <david_ascher@@brown.edu> */

int avl_get_item_by_key_most (
  avl_tree *            tree,
  void *                key,
  void **               value_address
  );

int avl_get_item_by_key_least (
  avl_tree *            tree,
  void *                key,
  void **               value_address
  );

#ifdef __cplusplus
}
#endif
@


2.9
log
@remove unused/unneeded height slot
@
text
@d7 1
a7 1
/* $Id: avl.h,v 2.8 2005/06/02 00:53:01 rushing Exp rushing $ */
d23 1
a23 1
  unsigned long         rank_and_balance;
d42 1
a42 1
typedef int (*avl_iter_index_fun_type)  (unsigned long index, void * key, void * iter_arg);
d53 1
a53 1
  unsigned long                 length;
d80 1
a80 1
  unsigned long         index,
d99 2
a100 2
  unsigned long         low,
  unsigned long         high,
d107 2
a108 2
  unsigned long *       low,
  unsigned long *       high
d115 2
a116 2
  unsigned long *       low,
  unsigned long *       high
@


2.8
log
@add ironport copyright
@
text
@d7 1
a7 1
/* $Id: avl.h,v 2.7 2005/06/02 00:20:45 rushing Exp rushing $ */
a52 1
  unsigned long                 height;
@


2.7
log
@avl_insert_by_key():
  returns index of insertion
  [IronPort v1.3]
@
text
@d4 1
d7 1
a7 1
/* $Id: avl.h,v 2.6 2005/06/01 23:34:55 rushing Exp rushing $ */
@


2.6
log
@[from IronPort]
  revision 1.2
  date: 2001/03/21 01:26:26;  author: rushing;  state: Exp;  lines: +2 -2
  protect macro arg *in* the macro
@
text
@d6 1
a6 1
/* $Id: avl.h,v 2.5 2005/06/01 22:33:16 rushing Exp rushing $ */
d68 2
a69 1
  void *                key
@


2.5
log
@add an "avl_" prefix to all global functions and macros
@
text
@d6 1
a6 1
/* $Id: avl.h,v 2.4 2005/06/01 22:30:12 rushing Exp rushing $ */
d35 1
a35 1
    (((n)->rank_and_balance & 3) | (r << 2))
@


2.4
log
@untabified, removed trailing whitespace
@
text
@d3 1
d6 1
a6 1
/* $Id: avl.h,v 2.3 1997/02/21 23:27:19 rushing Exp rushing $ */
d25 1
a25 1
#define GET_BALANCE(n)  ((int)(((n)->rank_and_balance & 3) - 1))
d27 1
a27 1
#define GET_RANK(n)     (((n)->rank_and_balance >> 2))
d29 1
a29 1
#define SET_BALANCE(n,b) \
d33 1
a33 1
#define SET_RANK(n,r) \
d58 2
a59 2
avl_tree * new_avl_tree (avl_key_compare_fun_type compare_fun, void * compare_arg);
avl_node * new_avl_node (void * key, avl_node * parent);
d61 1
a61 1
void free_avl_tree (
d66 1
a66 1
int insert_by_key (
d71 1
a71 1
int remove_by_key (
d77 1
a77 1
int get_item_by_index (
d83 1
a83 1
int get_item_by_key (
d89 1
a89 1
int iterate_inorder (
d95 1
a95 1
int iterate_index_range (
d103 1
a103 1
int get_span_by_key (
d110 1
a110 1
int get_span_by_two_keys (
d118 1
a118 1
int verify (avl_tree * tree);
d120 1
a120 1
void print_tree (
d125 1
a125 1
avl_node * get_predecessor (avl_node * node);
d127 1
a127 1
avl_node * get_successor (avl_node * node);
d131 1
a131 1
int get_item_by_key_most (
d137 1
a137 1
int get_item_by_key_least (
@


2.3
log
@reformatted the function prototypes
@
text
@d5 1
a5 1
/* $Id: avl.h,v 2.2 1997/02/21 23:23:25 rushing Exp rushing $ */
d12 4
a15 4
  void *		key;
  struct avl_node_tag *	left;
  struct avl_node_tag *	right;  
  struct avl_node_tag *	parent;
d21 1
a21 1
  unsigned long		rank_and_balance;
d24 1
a24 1
#define GET_BALANCE(n)	((int)(((n)->rank_and_balance & 3) - 1))
d26 1
a26 1
#define GET_RANK(n)	(((n)->rank_and_balance >> 2))
d38 5
a42 5
typedef int (*avl_key_compare_fun_type)	(void * compare_arg, void * a, void * b);
typedef int (*avl_iter_fun_type)	(void * key, void * iter_arg);
typedef int (*avl_iter_index_fun_type)	(unsigned long index, void * key, void * iter_arg);
typedef int (*avl_free_key_fun_type)	(void * key);
typedef int (*avl_key_printer_fun_type)	(char *, void *);
d50 5
a54 5
  avl_node *			root;
  unsigned long			height;
  unsigned long			length;
  avl_key_compare_fun_type	compare_fun;
  void * 			compare_arg;
d61 2
a62 2
  avl_tree *		tree,
  avl_free_key_fun_type	free_key_fun
d66 2
a67 2
  avl_tree *		ob,
  void *		key
d71 3
a73 3
  avl_tree *		tree,
  void *		key,
  avl_free_key_fun_type	free_key_fun
d77 3
a79 3
  avl_tree *		tree,
  unsigned long		index,
  void **		value_address
d83 3
a85 3
  avl_tree *		tree,
  void *		key,
  void **		value_address
d89 3
a91 3
  avl_tree *		tree,
  avl_iter_fun_type	iter_fun,
  void *		iter_arg
d95 1
a95 1
  avl_tree *		tree,
d97 3
a99 3
  unsigned long		low,
  unsigned long		high,
  void *		iter_arg
d103 4
a106 4
  avl_tree *		tree,
  void *		key,
  unsigned long *	low,
  unsigned long *	high
d110 5
a114 5
  avl_tree *		tree,
  void *		key_a,
  void *		key_b,
  unsigned long *	low,
  unsigned long *	high
d120 1
a120 1
  avl_tree *		tree,
d131 3
a133 3
  avl_tree *		tree,
  void *		key,
  void **		value_address
d137 3
a139 3
  avl_tree *		tree,
  void *		key,
  void **		value_address
@


2.2
log
@at_least() and at_most() from David Ascher
@
text
@d5 1
a5 1
/* $Id: avl.h,v 2.1 1997/02/21 23:09:58 rushing Exp rushing $ */
d60 56
a115 38
void free_avl_tree (avl_tree * tree,
		    avl_free_key_fun_type free_key_fun);

int insert_by_key (avl_tree * ob,
		   void * key);

int remove_by_key (avl_tree * tree,
		   void * key,
		   avl_free_key_fun_type free_key_fun);

int get_item_by_index (avl_tree * tree,
		       unsigned long index,
		       void ** value_address);

int get_item_by_key (avl_tree * tree,
		     void * key,
		     void **value_address);

int iterate_inorder (avl_tree * tree,
		     avl_iter_fun_type iter_fun,
		     void * iter_arg);

int iterate_index_range (avl_tree * tree,
			 avl_iter_index_fun_type iter_fun,
			 unsigned long low,
			 unsigned long high,
			 void * iter_arg);

int get_span_by_key (avl_tree * tree,
		     void * key,
		     unsigned long * low,
		     unsigned long * high);

int get_span_by_two_keys (avl_tree * tree,
			  void * key_a,
			  void * key_b,
			  unsigned long * low,
			  unsigned long * high);
d119 4
a122 2
void print_tree (avl_tree * tree,
		 avl_key_printer_fun_type key_printer);
d130 11
a140 7
int get_item_by_key_most (avl_tree * tree,
			  void * key,
			  void **value_address);

int get_item_by_key_least (avl_tree * tree,
			   void * key,
			   void **value_address);
@


2.1
log
@compare_arg works
@
text
@d5 1
a5 1
/* $Id: avl.h,v 2.0 1996/02/26 06:18:13 rushing Exp rushing $ */
d108 9
@


2.0
log
@revamp with comparison function considered part of the object
@
text
@d5 1
a5 1
/* $Id: avl.h,v 1.5 1995/11/28 20:33:52 rushing Exp rushing $ */
d38 1
a38 1
typedef int (*avl_key_compare_fun_type)	(struct _avl_tree *, void * a, void * b);
d50 5
a54 5
  avl_node *	root;
  unsigned long	height;
  unsigned long	length;
  avl_key_compare_fun_type compare_fun;
  void * compare_arg;
@


1.5
log
@new prototypes:
  get_span_by_key()
  get_span_by_two_keys()
@
text
@d5 5
a9 1
/* $Id: avl.h,v 1.4 1995/11/21 23:46:24 rushing Exp rushing $ */
d18 1
a18 1
   * factor: 00==-1, 01==0, 02==+1.
d36 14
a49 1
typedef struct {
d53 2
d57 1
a57 1
avl_tree * new_avl_tree (void);
d60 2
a61 1
void free_avl_tree (avl_tree * tree, int(*free_key_fun) (void * key));
d64 1
a64 2
		   void * key,
		   int (*compare_fun) (void * a, void * b));
d68 1
a68 2
		   int (*compare_fun) (void * a, void * b),
		   int (*free_key_fun) (void * key));
d70 3
a72 1
int get_item_by_index (avl_tree * tree, unsigned long index, void ** value_address);
a75 1
		     int (*compare_fun) (void * a, void * b),
d79 1
a79 1
		     int (*iter_fun)(void *, void *),
d83 1
a83 1
			 int (*iter_fun) (unsigned long, void *, void *),
a89 1
		     int (*compare_fun) (void * a, void * b),
a95 1
			  int (*compare_fun) (void * a, void * b),
d101 2
a102 1
void print_tree (avl_tree * tree, int(*key_printer)(char *, void *));
d107 5
@


1.4
log
@added get_predecessor and get_successor prototypes.
@
text
@d5 1
a5 1
/* $Id: avl.h,v 1.3 1995/11/16 22:46:42 rushing Exp rushing $ */
d68 13
@


1.3
log
@signed/unsigned glitches caught by the MS C compiler.
@
text
@d5 1
a5 1
/* $Id: avl.h,v 1.2 1995/11/16 05:53:16 rushing Exp rushing $ */
d73 3
@


1.2
log
@'publish' new_avl_node() prototype
@
text
@d5 1
a5 1
/* $Id: avl.h,v 1.1 1995/11/15 20:39:50 rushing Exp rushing $ */
d20 1
a20 1
#define GET_BALANCE(n)	(((n)->rank_and_balance & 3) - 1)
d26 1
a26 1
    (((n)->rank_and_balance & (~3)) | ((b) + 1))
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
/* $Id: $ */
d39 1
@
