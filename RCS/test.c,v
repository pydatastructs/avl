head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2005.06.02.01.18.40;	author rushing;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.02.01.17.57;	author rushing;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.01.23.05.12;	author rushing;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.01.22.48.43;	author rushing;	state Exp;
branches;
next	;


desc
@@


1.4
log
@64-bit platforms: use <int> instead of <long>.
@
text
@#include <stdio.h>
#include <stdlib.h>

#include "avl.h"

int
compare_ints (void * compare_arg, void * a, void * b)
{
  int la, lb;
  la = (int) a;
  lb = (int) b;
  
  if (la < lb) {
    return -1;
  } else if (la > lb) {
    return +1;
  } else {
    return 0;
  }
}

int
int_printer (char * buffer, void * key)
{
  return sprintf (buffer, "%d", (int) key);
}

int
null_key_free (void * key) {
  return 0;
}

int
main (int argc, char ** argv)
{
  avl_tree * tree;
  unsigned int index;

  tree = avl_new_avl_tree (compare_ints, NULL);

  avl_insert_by_key (tree, (void *) 50, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 45, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 15, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 10, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 75, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 55, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 70, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 80, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 60, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 32, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 20, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 40, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 25, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 22, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 31, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 30, &index); avl_print_tree (tree, int_printer); avl_verify (tree);
  while (tree->length) {
    int num = 0;
    int any = 0;
    any = fscanf (stdin, "%d", &num);
    if (any < 1) {
      return 0;
    } else {
      fprintf (stdout, "deleting %d\n", num);
      avl_remove_by_key (tree, (void *) num, null_key_free);
      avl_print_tree (tree, int_printer);
      avl_verify (tree);
    }
  }
  return 0;
}
@


1.3
log
@api changes
@
text
@d7 1
a7 1
compare_longs (void * compare_arg, void * a, void * b)
d9 3
a11 3
  long la, lb;
  la = (long) a;
  lb = (long) b;
d23 1
a23 1
long_printer (char * buffer, void * key)
d25 1
a25 1
  return sprintf (buffer, "%ld", (long) key);
d39 1
a39 1
  tree = avl_new_avl_tree (compare_longs, NULL);
d41 16
a56 16
  avl_insert_by_key (tree, (void *) 50, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 45, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 15, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 10, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 75, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 55, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 70, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 80, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 60, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 32, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 20, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 40, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 25, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 22, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 31, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 30, &index); avl_print_tree (tree, long_printer); avl_verify (tree);
d66 1
a66 1
      avl_print_tree (tree, long_printer);
@


1.2
log
@libavl names now have an 'avl_' prefix.
@
text
@d37 1
d41 16
a56 16
  avl_insert_by_key (tree, (void *) 50); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 45); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 15); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 10); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 75); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 55); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 70); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 80); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 60); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 32); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 20); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 40); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 25); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 22); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 31); avl_print_tree (tree, long_printer); avl_verify (tree);
  avl_insert_by_key (tree, (void *) 30); avl_print_tree (tree, long_printer); avl_verify (tree);
@


1.1
log
@Initial revision
@
text
@d38 1
a38 1
  tree = new_avl_tree (compare_longs, NULL);
d40 16
a55 16
  insert_by_key (tree, (void *) 50); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 45); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 15); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 10); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 75); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 55); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 70); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 80); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 60); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 32); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 20); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 40); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 25); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 22); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 31); print_tree (tree, long_printer); verify (tree);
  insert_by_key (tree, (void *) 30); print_tree (tree, long_printer); verify (tree);
d58 10
a67 6

    fscanf (stdin, "%d", &num);
    fprintf (stdout, "deleting %d\n", num);
    remove_by_key (tree, (void *) num, null_key_free);
    print_tree (tree, long_printer);
    verify (tree);
@
